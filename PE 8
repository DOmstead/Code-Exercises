function maxProductFromString(numString, digitsDesired) {
  let currentMaxValue = 1;
  let potentialMaxValue;
  let zeroCounter = 0;

  for (i = 0; i < numString.length; i++) {
    // Establishes the inital digits desired length array, then will never be used again
    if (i < digitsDesired) {
      currentMaxValue *= parseInt(numString.charAt(i))
      potentialMaxValue = currentMaxValue;
    }
    // The two else if statements handle the situation where zero cannot be divided by zero
    else if (potentialMaxValue == 0) {
      potentialMaxValue = parseInt(numString.charAt(i))
      zeroCounter = digitsDesired - 1
    }
    else if (zeroCounter != 0) {
      potentialMaxValue *= parseInt(numString.charAt(i))
      zeroCounter--
      if (potentialMaxValue > currentMaxValue) {
        currentMaxValue = potentialMaxValue;
      }
    }
    // This statement will run in most cases, forming the core of the function.  
    else {
      potentialMaxValue /= parseInt(numString.charAt(i - digitsDesired))
      potentialMaxValue *= parseInt(numString.charAt(i))
      if (potentialMaxValue > currentMaxValue) {
        currentMaxValue = potentialMaxValue;
      }
    }
  }
  return currentMaxValue
}